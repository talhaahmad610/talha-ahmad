{% schema %}
{
  "name": "Product Grid",
  "settings": [],
  "presets": [
    {
      "name": "Product Grid"
    }
  ]
}
{% endschema %}

<style>
  .product-grid {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 20px;
    max-width: 800px;
    margin:30px auto auto;
    padding:10px;
    

  }

  .tagline{
    padding:20px;
  }

  .product-item {
    position: relative;
    overflow: hidden;
  }

  .product-image {
    width: 100%;
    display: block;
    border-radius: 8px;
  }
  .plus-sign {
    position: absolute;
    top: 60%;
    left: 60%;
    transform: translate(-50%, -50%);
    background: white;
    color: black;
    font-size: 14px;
    font-weight: bold;
    width: 15px;
    height: 15px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: 0.3s;
  }


  /* Popup Card */
  #product-popup{
    display: none; 
    width: 311px; 
    height: 447px; 
    position: fixed; 
    top: 50%; 
    left: 50%; 
    transform: translate(-50%, -50%); 
    background: white; 
    box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.20); 
    z-index: 1000; 
    padding: 20px; 
    border-radius: 8px;
  }
  
  #popup-product-image{
    width: 120px; 
    height: 140px; 
    left: 17px; 
    top: 36px; 
    position: absolute; 
    object-fit: cover;
  }
  #popup-title{
    width: 136px; 
    left: 145px; 
    top: 39px; 
    position: absolute; 
    color: black; 
    font-size: 16px; 
    font-family: Jost; 
    font-weight: 300; 
    line-height: 19.20px;
  }

  #popup-price{
    width: 64px; 
    left: 145px; 
    top: 60px; 
    position: absolute; 
    color: black; 
    font-size: 16px; 
    font-family: Lustria; 
    font-weight: 400; 
    line-height: 19.20px;
  }

  #popup-description{
    width: 146px; 
    left: 145px; 
    top: 80px; 
    position: absolute; 
    color: black; 
    font-size: 14px; 
    font-family: Jost; 
    font-weight: 300; 
    line-height: 15.40px;
  }

  #popup-colors-container{
    width: 271px; 
    height: 64.48px; 
    left: 20px; 
    top: 186px; 
    position: absolute;
  }

  #popup-sizes-container{
    width: 271px; 
    height: 64px; 
    left: 20px; 
    top: 262px; 
    position: absolute;
  }

  #size-dropdown-trigger{
    width: 271px; 
    height: 40.44px; 
    left: 0px; 
    top: 24.35px; 
    position: absolute; 
    border: 0.50px black solid; 
    cursor: pointer; 
    display: flex; 
    align-items: center; 
    padding-left: 13px;
  }

  #selected-size{
    color: black; 
    font-size: 16px; 
    font-family: Jost; 
    font-weight: 400; 
    line-height: 16px;
  }

  #size-options{
    display: none; 
    position: absolute; 
    top: 64px; 
    left: 0; 
    width: 271px; 
    background: white; 
    border: 0.50px black solid; 
    z-index: 10;
  }

  #add-cart{
    width: 271px; 
    height: 45px; 
    left: 20px; 
    top: 377px; 
    position: absolute; 
    background: black; 
    display: flex; 
    align-items: center; 
    justify-content: center;
  }

  #add-cart-btn{
    color: white; 
    font-size: 16px; 
    font-family: Jost; 
    font-weight: 400; 
    text-transform: uppercase; 
    line-height: 20.48px;
  }

  #close-btn{
    position: absolute; 
    top: 22.60px; 
    right: 20px; 
    width: 20px; 
    height: 20px; 
    cursor: pointer;
    color: black;
    font-size: 24px;
    font-family: Jost;
    font-weight: 400;
    line-height: 20px;
    text-align: center;
  }

</style>



<div class="tagline">
<h2>Tisso Vision In the Wild</h2>
</div>
<div class="product-grid">
  {% for product in collections.all.products limit:6 %}
    <div class="product-item" data-handle="{{ product.handle }}">
      <img src="{{ product.featured_image | img_url: 'medium' }}" class="product-image" alt="{{ product.title }}">
      <div class="plus-sign" onclick="openPopup('{{ product.handle }}')">+</div>
    </div>
  {% endfor %}
</div>
<!-- Popup Card -->
<div id="product-popup">
    
    <!-- Product Image -->
    <img id="popup-product-image">

    <!-- Product Title -->
    <div id="popup-title" ></div>

    <!-- Product Price -->
    <div id="popup-price" ></div>

    <!-- Product Description -->
    <div id="popup-description" ></div>

    <!-- Colors Section Container -->
    <div id="popup-colors-container" ></div>

    <!-- Sizes Section Container -->
    <div id="popup-sizes-container">
  <div data-property-1="Group 1000008185" style="width: 271px; height: 64px; position: relative;">
    <!-- Size label -->
    <div style="left: 0px; top: 0px; position: absolute; color: #333333; font-size: 14px; font-family: Jost; font-weight: 400; line-height: 18.20px;">Size</div>
    
    <!-- Dropdown trigger -->
    <div id="size-dropdown-trigger">
      <span id="selected-size">Choose your size</span>
      <!-- Dropdown arrow -->
      <div style="width: 12px; height: 6px; left: 238px; top: 42px; position: absolute; outline: 1.50px black solid; transform: rotate(180deg);"></div>
    </div>

    <!-- Dropdown options -->
    <div id="size-options">
    </div>
  </div>
</div>

    <!-- Add to Cart Button -->
    <div id="add-cart" data-add-to-cart>
        <div id="add-cart-btn">
            Add to cart
        </div>
    </div>

    <!-- Close Button -->
<div id="close-btn"
  onclick="closePopup()" >×</div>

</div>
<script>
let selectedProduct = null;
let selectedColor = '';
let selectedSize = '';
async function openPopup(handle) {
    try {
        const response = await fetch(`/products/${handle}.json`);
        if (!response.ok) throw new Error("Failed to fetch product");
        const data = await response.json();
        const product = data.product;
        selectedProduct = data.product;

        // Update basic info
        document.getElementById('popup-title').textContent = product.title;
        document.getElementById('popup-price').textContent = `${product.variants[0].price}€`;
        document.getElementById('popup-description').textContent = product.body_html.replace(/<[^>]+>/g, '');
        document.getElementById('popup-product-image').src = product.images[0]?.src || "https://placehold.co/120x140";

        // ====== Dynamic Color Section ======
        const colorsContainer = document.getElementById('popup-colors-container');
        colorsContainer.innerHTML = `
            <div data-property-1="Group 1000008186" style="width: 271px; height: 64.48px; position: absolute">
                <div style="width: 271px; height: 40.44px; left: 0px; top: 24.04px; position: absolute; border: 0.50px black solid"></div>
                <div style="left: 0px; top: 0px; position: absolute; color: #333333; font-size: 14px; font-family: Jost; font-weight: 400; line-height: 18.20px;">Color</div>
            </div>
        `;

        const colorGroup = colorsContainer.firstElementChild;
        const colors = product.options.find(opt => opt.name.toLowerCase() === 'color')?.values || [];

        colors.forEach((color, index) => {
            // Color Swatch
            const swatch = document.createElement('div');
            swatch.style.cssText = `
                width: ${index === 0 ? '5.81px' : '4.84px'};
                height: ${index === 0 ? '40.44px' : '39.63px'};
                left: ${index === 0 ? '0px' : '135.50px'};
                top: ${index === 0 ? '24.01px' : '24.41px'};
                position: absolute;
                background: ${color.toLowerCase()};
                border: 0.50px black solid;
            `;
            colorGroup.appendChild(swatch);

            // Color Label
            const label = document.createElement('div');
            label.textContent = color;
            label.style.cssText = `
                width: 112px;
                left: ${index === 0 ? '15px' : '149px'};
                top: 35px;
                position: absolute;
                color: black;
                font-size: 18px;
                font-family: Jost;
                font-weight: 400;
                text-transform: capitalize;
                line-height: 18px;
            `;
            colorGroup.appendChild(label);
            swatch.addEventListener('click', () => {
                selectedColor = color.toLowerCase();
            });
        });

        // ====== Dynamic Size Section ======
        const sizesContainer = document.getElementById('popup-sizes-container');
const sizeOptionsContainer = document.getElementById('size-options');
const selectedSizeElement = document.getElementById('selected-size');

// Clear previous options
sizeOptionsContainer.innerHTML = '';

// Get sizes from product
const sizes = product.options.find(opt => opt.name.toLowerCase() === 'size')?.values || [];

// Create dropdown options
sizes.forEach(size => {
  const sizeOption = document.createElement('div');
  sizeOption.textContent = size;
  sizeOption.style.cssText = `
    padding: 10px 13px;
    color: black;
    font-size: 16px;
    font-family: Jost;
    font-weight: 400;
    line-height: 16px;
    cursor: pointer;
    &:hover { background: #f5f5f5; }
  `;
  sizeOption.addEventListener('click', () => {
    selectedSizeElement.textContent = size;
    sizeOptionsContainer.style.display = 'none';
  });
  sizeOptionsContainer.appendChild(sizeOption);
  sizeOption.addEventListener('click', () => {
                selectedSize = size.toLowerCase();
            });
});

// Dropdown toggle logic
document.getElementById('size-dropdown-trigger').addEventListener('click', () => {
  sizeOptionsContainer.style.display = sizeOptionsContainer.style.display === 'none' ? 'block' : 'none';
});

// Close dropdown when clicking outside
document.addEventListener('click', (e) => {
  if (!e.target.closest('#popup-sizes-container')) {
    sizeOptionsContainer.style.display = 'none';
  }
});

        document.getElementById('product-popup').style.display = 'block';
    } catch (error) {
        console.error("Error loading product details", error);
    }
}
async function addToCart() {
  if (!selectedProduct || !selectedSize) {
    alert('Please select a size');
    return;
  }

  try {
    // Find the selected variant
    const variant = selectedProduct.variants.find(v => 
      v.options.includes(selectedColor) && 
      v.options.includes(selectedSize)
    );

    if (!variant) {
      alert('Selected combination not available');
      return;
    }

    // Add main product to cart
    await fetch('/cart/add.js', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        items: [{
          id: variant.id,
          quantity: 1
        }]
      })
    });

    // Check if we need to add the Soft Winter Jacket
    if (selectedColor.toLowerCase() === 'black' && selectedSize.toLowerCase() === 'medium') {
      const jacketResponse = await fetch('/products/soft-winter-jacket.json');
      const jacketData = await jacketResponse.json();
      const jacketVariant = jacketData.product.variants[0];

      await fetch('/cart/add.js', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          items: [{
            id: jacketVariant.id,
            quantity: 1
          }]
        })
      });
    }

    // Redirect to cart or update UI
    window.location.href = '/cart';
  } catch (error) {
    console.error('Error adding to cart:', error);
    alert('Error adding product to cart');
  }
}

// Add click handler to your Add to Cart button
document.querySelector('[data-add-to-cart]').addEventListener('click', addToCart);


function closePopup() {
    document.getElementById('product-popup').style.display = 'none';
}

</script>